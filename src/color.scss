/* Semantic Props for color. Follows the 60-30-10 color theory rule. */

:where(.semantic) {
	// Define map of relative color Semantic Props:
	$colors: (
		--primary-color: var(--white),
		--secondary-color: var(--gray),
		--accent-color: var(--blue)
	);

	// Define list of lightness channel weights:
	$weights: 0 100 200 300 400 500 600 700 800 900 1000;

	// Define weighted color Semantic Props:
	@each $prop, $color in $colors {
		#{$prop}: $color;
		@each $l in $weights {
			#{$prop}-#{$l}: oklch(from var(#{$prop}) #{1 - calc($l / 1000)} c h);
			@each $d in $weights {
				@if $d != $l {
					#{$prop}-#{$l}-#{$d}: light-dark(var(#{$prop}-#{$l}), var(#{$prop}-#{$d}));
				}
			}
		}
	}

	--black: oklch(0.2 0.02 250);
	--silver: oklch(0.8 0.02 260);
	--gray: oklch(0.6 0.01 260);
	--white: oklch(0.95 0.02 250);
	--maroon: oklch(0.5 0.2 3);
	--red: oklch(0.6 0.25 30);
	--pink: oklch(0.8 0.1 0);
	--purple: oklch(0.5 0.2 290);
	--indigo: oklch(0.5 0.2 270);
	--fuchsia: oklch(0.7 0.3 330);
	--green: oklch(0.6 0.2 150);
	--lime: oklch(0.8 0.25 140);
	--olive: oklch(0.6 0.15 160);
	--yellow: oklch(0.8 0.15 90);
	--orange: oklch(0.6 0.15 50);
	--brown: oklch(0.5 0.05 50);
	--navy: oklch(0.35 0.2 270);
	--blue: oklch(0.5 0.15 250);
	--teal: oklch(0.6 0.1 180);
	--cyan: oklch(0.7 0.15 200);

	--alternative-color: var(--gray);
	--success-color: var(--green);
	--danger-color: var(--red);
	--warning-color: var(--yellow);
	--info-color: var(--cyan);
}