////
/// Semantic Props used for color.
/// @group colors
/// @since 0.3.0
////

@use "sass:color" as color;
@use "sass:map" as map;
@use "sass:string" as string;

/// Mapped Semantic Props colors to values.
/// Generates (0 through 10) colors (black to white).
/// Uses color-light-dark syntax.
/// @type map
$colors: (
	theme: rgb(233, 239, 245),
	primary: rgb(38, 169, 241),
	secondary: rgb(118, 130, 139),
	success: rgb(82, 183, 102),
	danger: rgb(202, 85, 83),
	warning: rgb(255, 214, 90),
	info: rgb(0, 212, 251)
) !default;

:root {
	@each $prop, $color in $colors {
		// Create weighted color props:
		@for $l from 0 through 10 {
			$colors: map.set($colors, #{$prop}-#{$l}, color.change($color, $lightness: $l * 10%)) !global;
		}

		// Create light-dark weighted color props:
		@for $l from 0 through 10 {
			@for $d from 0 through 10 {
				// Create a unique custom property name:
				$custom-property: --#{string.unique-id()}-#{$prop}-#{$l}-#{$d};

				// Map $colors to use custom property:
				$colors: map.set($colors, #{$prop}-#{$l}-#{$d}, var($custom-property)) !global;

				// Define custom property using light-dark color (alongside fallback):
				#{$custom-property}: map.get($colors, #{$prop}-#{$l});
				#{$custom-property}: light-dark(
					map.get($colors, #{$prop}-#{$l}),
					map.get($colors, #{$prop}-#{$d})
				);
			}
		}
	}
}

/// Gets Semantic Props color value.
/// @see $colors
/// @parameter {string} $prop Name of color prop.
/// @returns {color} Value of color prop.
@function color($prop) {
	@return map.get($colors, $prop);
}