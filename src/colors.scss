////
/// Semantic Props used for color.
/// @group colors
/// @since 0.3.0
////

@use "sass:color" as color;
@use "sass:map" as map;

/// Mapped Semantic Props colors to values.
/// Generates (0 through 10) custom property colors (black to white).
/// Custom property uses --[prop]-color-[light]-[dark] syntax.
/// Uses CSS Relative Colors and light-dark function.
/// @type map
$colors: () !default;
$colors: map.merge((
	theme: rgb(233, 239, 245),
	primary: rgb(38, 169, 241),
	secondary: rgb(118, 130, 139),
	success: rgb(82, 183, 102),
	danger: rgb(202, 85, 83),
	warning: rgb(255, 214, 90),
	info: rgb(0, 212, 251)
), $colors);

:root {
	@each $prop, $color in $colors {
		// Create reference color prop:
		#{--#{$prop}-color}: $color;

		// Create weighted light-dark color props:
		@for $l from 0 through 10 {
			@for $d from 0 through 10 {
				// Create color custom property name:
				$custom-property: --#{$prop}-color-#{$l}-#{$d};

				// Define color custom property using light-dark (alongside fallback):
				#{$custom-property}: color.change($color, $lightness: $l * 10%);
				#{$custom-property}: light-dark(
					oklch(from var(#{--#{$prop}-color}) #{$l * 10%} c h),
					oklch(from var(#{--#{$prop}-color}) #{$d * 10%} c h)
				);
			}
		}
	}
}

/// Gets Semantic Props mapped color value.
/// @see $colors
/// @parameter {string} $prop Name of color prop.
/// @returns {color} Value of color prop.
@function color($prop) {
	@return map.get($colors, $prop);
}