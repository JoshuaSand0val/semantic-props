////
/// Semantic Props used for color.
/// @group colors
/// @since 0.3.0
////

@use "sass:color" as color;
@use "sass:math" as math;

/// Mapped Semantic Props colors to values.
/// Props use --color-[light]-[dark] syntax.
/// @type map
$colors: (
	"theme": rgb(233, 239, 245),
	"primary": rgb(38, 169, 241),
	"secondary": rgb(118, 130, 139),
	"success": rgb(82, 183, 102),
	"danger": rgb(202, 85, 83),
	"warning": rgb(255, 214, 90),
	"info": rgb(0, 212, 251)
);

:where(.--semantic) {
	// Define weighted props (0 through 12) (0% to 100% lightness):
	@for $l from 0 through 12 {
		// Calculate color lightness channel:
		$light: 100% * (1 - math.div($l, 12));

		// Define weighted relative props alongside fallback:
		--color-#{$l}: color.change($color, $lightness: $light);
		--color-#{$l}: hsl(from var(--color) h s #{$light});

		// Define light-dark props:
		@for $d from 0 through 12 {
			--color-#{$l}-#{$d}: var(--color-#{$l});
			@if ($l != $d) {
				--color-#{$l}-#{$d}: light-dark(var(--color-#{$l}), var(--color-#{$d}));
			}
		}
	}

	// Define color prop classes:
	@each $prop, $color in $colors {
		&:where(.--#{$prop}) {
			#{--color}: $color;
		}
	}

	// Extend theme as default color:
	@extend .--theme;
}