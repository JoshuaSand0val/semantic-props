/**
 * Adds classes to all Semantic Props elements.
 * @type {Function}
 * @preserve
 */
function t(){const t=t=>{!function(t){const e=["--2xs-breakpoint","--xs-breakpoint","--sm-breakpoint","--md-breakpoint","--lg-breakpoint","--xl-breakpoint","--2xl-breakpoint","--3xl-breakpoint"],o=new ResizeObserver((t=>{for(const o of t){const t=o.target;t.classList.remove(...e);for(const s of e){const e=getComputedStyle(t).getPropertyValue(s);o.borderBoxSize[0].inlineSize>=parseFloat(e)&&t.classList.add(s)}}}));o.observe(t)}(t),function(t){const e=["--light-color","--dark-color"],o=matchMedia("(prefers-color-scheme: dark)"),s=()=>{const s=(()=>{const e=t.closest(".--light-color, .--dark-color");return null!==e?e.classList.contains("--dark-color"):o.matches})();t.classList.remove(...e),t.classList.add(s?"--dark-color":"--light-color")};e.some((e=>t.classList.contains(e)))||(o.addEventListener("change",s),s())}(t)};new MutationObserver((e=>{for(const o of e){const e=o.target;"attributes"===o.type&&(o.oldValue&&o.oldValue.includes("--semantic")||e.classList.contains("--semantic")&&t(e))}})).observe(document.documentElement,{subtree:!0,childList:!0,attributes:!0,attributeFilter:["class"],attributeOldValue:!0});for(const e of document.querySelectorAll(".--semantic"))t(e)}"undefined"!=typeof window&&addEventListener("DOMContentLoaded",t);export{t as default};
