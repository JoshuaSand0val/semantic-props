/**
 * Adds classes to all Semantic Props elements.
 * @type {Function}
 * @preserve
 */
function e(){const e=e=>{!function(e){const t=["--2xs-breakpoint","--xs-breakpoint","--sm-breakpoint","--md-breakpoint","--lg-breakpoint","--xl-breakpoint","--2xl-breakpoint","--3xl-breakpoint"],o=new ResizeObserver((e=>{for(const o of e){const e=o.target;e.classList.remove(...t);for(const s of t){const t=getComputedStyle(e).getPropertyValue(s);o.borderBoxSize[0].inlineSize>=parseFloat(t)&&e.classList.add(s)}}}));o.observe(e)}(e),function(e){const t=["--light-color","--dark-color"],o=matchMedia("(prefers-color-scheme: dark)"),s=()=>{const s=o.matches;e.classList.remove(...t),e.classList.add(s?"--dark-color":"--light-color")};t.some((t=>e.classList.contains(t)))||(o.addEventListener("change",s),s())}(e)};new MutationObserver((t=>{for(const o of t){const t=o.target;"attributes"===o.type&&(o.oldValue&&o.oldValue.includes("--semantic")||t.classList.contains("--semantic")&&e(t))}})).observe(document.documentElement,{subtree:!0,childList:!0,attributes:!0,attributeFilter:["class"],attributeOldValue:!0});for(const t of document.querySelectorAll(".--semantic"))e(t)}"undefined"!=typeof window&&addEventListener("DOMContentLoaded",e);export{e as default};
