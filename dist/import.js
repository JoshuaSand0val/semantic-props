function t(t){const e=["--2xs-breakpoint","--xs-breakpoint","--sm-breakpoint","--md-breakpoint","--lg-breakpoint","--xl-breakpoint","--2xl-breakpoint","--3xl-breakpoint"],o=new ResizeObserver((t=>{for(const o of t){const t=o.target;t.classList.remove(...e);for(const n of e){const e=getComputedStyle(t).getPropertyValue(n);o.borderBoxSize[0].inlineSize>=parseFloat(e)&&t.classList.add(n)}}}));o.observe(t)}function e(t){const e=["--light-color","--dark-color"],o=matchMedia("(prefers-color-scheme: dark)"),n=()=>{t.classList.remove(...e);const n=(()=>{const e=t.closest("\n\t\t\t\t.--semantic.--light-color,\n\t\t\t\t.--semantic.--dark-color\n\t\t\t");return null!==e?e.classList.contains("--dark-color"):o.matches})();t.classList.add(n?"--dark-color":"--light-color")};e.some((e=>t.classList.contains(e)))||(o.addEventListener("change",n),n())}
/**
 * Adds custom property classes to all Semantic Props elements.
 * @type {Function}
 * @preserve
 */function o(){const o=()=>{for(const o of document.querySelectorAll(".--semantic"))t(o),e(o)};o();new MutationObserver(o).observe(document.documentElement,{subtree:!0,childList:!0})}"undefined"!=typeof window&&addEventListener("DOMContentLoaded",o);export{o as default};
